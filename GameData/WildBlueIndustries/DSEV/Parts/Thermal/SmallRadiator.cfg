PART
{
name = WBI_SmallRadiator
module = Part
author = Angel-125

rescaleFactor = 1

MODEL
{
    model = WildBlueIndustries/DSEV/Assets/SmallRadiator
}

// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_stack_attach = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0

TechRequired = nuclearPropulsion
entryCost = 14500
cost = 3000
category = Thermal
subcategory = 0
title = Hotplate Radiator
manufacturer = Wild Blue Industries
description = Sometimes, big plasma screen TVs don't make good radiators. That's where the Hotplate comes in. It offers a smaller heat radiative capacity than its larger cousin, but it's perfect for devices that don't need a lot of heat dissapation. It works great for heating up snacks as well!

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,1,0,0,1

mass = 0.1
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.3
angularDrag = 2
crashTolerance = 6
breakingForce = 200
breakingTorque = 200
maxTemp = 2000
bulkheadProfiles = srf
thermalMassModifier = 2
emissiveConstant = 0.8
heatConductivity = 0.001
skinInternalConductionMult = 2000	
radiatorHeadroom = 0.75
thermalMassModifier = 2.5
	
MODULE
{
    name = WBIHeatRadiator
    animationName = Deploy
    retractable = true
    pivotName = sunPivot
    raycastTransformName = suncatcher
    windResistance = 5
    trackingSpeed = 0.1	

    //Amount of ElectricCharge per second required to run the radiator.
    //Leave blank or set to zero if you don't want to require electric charge.
    ecRequired = 1.1

    //INPUT_RESOURCE specifies the coolant needed for heat transfer. It is required for active cooling.
    //Active cooling circulates coolant to other parts in the vessel to cool them down.
    //Without active cooling, parts must rely on the parts they're attached to,
    //their own mass, and the environment to cool down.
    //You can use whatever resource you want for coolant. Some resources are better than others.
    INPUT_RESOURCE
    {
        name = Coolant

        flowMode = NO_FLOW

        ratio = 1.0

    }




    //Radiators support two types of cooling: closed-cycle, and open-cycle.

    //Closed-cycle keeps circulating coolant within the vessel, and it may take awhile

    //for the vessel to cool down. Open-cycle cooling sheds heat more quickly,

    //but at the expense of coolant (the resources specified by INPUT_RESOURCE).
    //This value specifies the number of units per second to dump overboard.
    //Each INPUT_RESOURCE above will be dumped according to their ratio.

    //If you don't want open-cycle cooling, then don't include this field or set it to 0.
    coolantDumpRate = 16.67

    //Specifies the coolant loss rate.
    //The first number represents the number of units per second that is lost
    //in general. The second number is the number of units lost per g of acceleration.
    //That second number is particularly useful for liquid droplet radiators.
    //Uncomment this line if you want coolant loss.
    //coolantLossRate = 0,1.0

    //Name of the particle effects to enable during open-cycle cooling
    coolantDumpEffect = CoolantDump
    soundFilePath = Squad/Sounds/sound_rocket_mini
}	
	
	MODULE
	{
		name = ModuleActiveRadiator
		maxEnergyTransfer = 12500
		overcoolFactor = 0.25
		isCoreRadiator = true
		maxLinksAway = 2	
		RESOURCE
		{
			name = ElectricCharge
			rate = 0.025
		}		
	}

RESOURCE
{
    name = Coolant
    amount = 1000
    maxAmount = 1000
}

}
