PART
{
	name = wbiAvatarRadiator
	module = Part
	author = Angel-125

	rescaleFactor = 1

	MODEL
	{
		model = WildBlueIndustries/DSEV/Parts/Thermal/AvatarRadiator/AvatarRadiator
	}

	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_attach = 0, 0, 0, 0, -1, 0
	// node_stack_attach = 0.0, 0.0, 0.0, 0.0, -1.0, 3.0
	node_stack_bottom = 0, 0, 0, 0, -1, 0, 3
	node_stack_top = 0, 10.0, 0, 0, 1, 0, 3

	TechRequired = largeElectrics
	entryCost = 45000
	cost = 246450
	category = Thermal
	subcategory = 0
	title = WB-TM-2000 Avatar Radiator
	manufacturer = Wild Blue Industries
	description = An incredibly powerful and hefty graphene radiator, sporting a 7.5m cross-section. The Avatar Radiator is the absolute best for managing the kinds of thermal loads that can easily build up and obliterate the ship if not contained. Such loads most obviously come from engines that carry references to dying or dead stars.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,0,0

	mass = 8
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 10
	breakingForce = 200
	breakingTorque = 200
	maxTemp = 3000
	bulkheadProfiles = srf
	thermalMassModifier = 2.5
	emissiveConstant = 0.99
	heatConductivity = 0.001
	skinInternalConductionMult = 2000
	radiatorHeadroom = 0.75

	MODULE
	{
		name = ModuleActiveRadiator
		maxEnergyTransfer = 1000000
		overcoolFactor = 0.25
		isCoreRadiator = true
		RESOURCE
		{
			name = ElectricCharge
			rate = 10
		}		
	}

	MODULE
	{
		name = WBIFixedHeatRadiator

		//INPUT_RESOURCE specifies the coolant needed for heat transfer. It is required for active cooling.
		//Active cooling circulates coolant to other parts in the vessel to cool them down.
		//Without active cooling, parts must rely on the parts they're attached to,
		//their own mass, and the environment to cool down.
		//You can use whatever resource you want for coolant. Some resources are better than others.
		INPUT_RESOURCE
		{
			name = Coolant
			flowMode = NO_FLOW
			ratio = 1.0

		}
		//Radiators support two types of cooling: closed-cycle, and open-cycle.

		//Closed-cycle keeps circulating coolant within the vessel, and it may take awhile

		//for the vessel to cool down. Open-cycle cooling sheds heat more quickly,

		//but at the expense of coolant (the resources specified by INPUT_RESOURCE).
		//This value specifies the number of units per second to dump overboard.
		//Each INPUT_RESOURCE above will be dumped according to their ratio.

		//If you don't want open-cycle cooling, then don't include this field or set it to 0.
		coolantDumpRate = 66.67

		//Specifies the coolant loss rate.
		//The first number represents the number of units per second that is lost
		//in general. The second number is the number of units lost per g of acceleration.
		//That second number is particularly useful for liquid droplet radiators.
		//Uncomment this line if you want coolant loss.
		//coolantLossRate = 0,1.0

		//Name of the particle effects to enable during open-cycle cooling
		coolantDumpEffect = CoolantDump
		soundFilePath = Squad/Sounds/sound_rocket_mini
	}			

	RESOURCE
	{
		name = Coolant
		amount = 4000
		maxAmount = 4000
	}
}
